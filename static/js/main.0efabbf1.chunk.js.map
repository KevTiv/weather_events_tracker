{"version":3,"sources":["Utils/Img/barLoaderAnimation.svg","Components/Loader.tsx","Components/Map.tsx","Components/Header.tsx","Components/ButtonControl.tsx","Utils/Img/nasa_logo.png","Components/Footer.tsx","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loader","className","src","BarLoaderAnimation","alt","Map","eventData","center","zoom","showFires","showVolcanos","showStorms","fireMarkers","map","event","categories","id","Marker","position","geometry","coordinates","Popup","title","volcanoMarkers","stormMarkers","MapContainer","lat","lng","TileLayer","attribution","url","defaultProps","Header","icon","weatherAppIcon","ButtonControl","onClickFireEvents","onClickVolcanosEvents","onClickStormsEvents","onClick","locationFireIcon","locationVolcanoIcon","locationCloudIcon","Footer","currentYear","href","target","rel","nasaLogo","toString","githubIcon","linkedinIcon","App","useState","setCurrentYear","setEventData","loading","setLoading","setShowFires","setShowVolcanos","setShowStorms","useEffect","fetchEvents","a","process","fetch","res","json","events","console","error","curDate","Date","getFullYear","e","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0efabbf1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/barLoaderAnimation.a4ae9ca3.svg\";","import BarLoaderAnimation from '../Utils/Img/barLoaderAnimation.svg';\nconst Loader = () => {\n    return (\n        <>\n            <div className=\"loader-container\">\n                <img  src={BarLoaderAnimation} alt=\"Loading...\"/>\n                \n                <h1>Loading...</h1>\n            </div>\n        </>\n    )\n}\n\nexport default Loader\n","import {useState} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {LocationFireMarker, LocationVolcanoMarker, LocationStormMarker} from './LocationMarker';\nimport LocationInfoBox from './LocationInfoBox';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\n//Props defintions for TS.\ntype mapProps = {\n    eventData: any[],\n    zoom: number,\n    center:{\n        lat: number,\n        lng: number\n    },\n    showFires: boolean,\n    showVolcanos: boolean,\n    showStorms: boolean\n}\ntype infoProps={\n    id: string,\n    details: string\n}\n//Google map component\nconst Map = ({eventData, center, zoom, showFires, showVolcanos, showStorms}: mapProps) => {\n    //API key stored in .env file\n    // const googleMapApiKey:string|undefined = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\n    // const [eventLocationInfo, setEventLocationInfo] = useState<infoProps>();\n    \n    //Fire markers object\n    const fireMarkers = eventData.map((event:any) =>{\n        if(event.categories[0].id === 'wildfires'){\n            return(\n                // <LocationFireMarker\n                //     key={event.id}  \n                //     lat={event.geometry[0].coordinates[1]} \n                //     lng={event.geometry[0].coordinates[0]} \n                //     onClick={()=>{\n                //         setEventLocationInfo({\n                //             id: event.id,\n                //             details: event.title\n                //         })\n                        \n                //     }}\n                // />\n                <Marker position={[event.geometry[0].coordinates[1],event.geometry[0].coordinates[0]]}>\n                    <Popup>\n                        <h2>id: {event.id},</h2><br/>\n                        <h2>details: {event.title}</h2>\n                    </Popup>\n                </Marker>\n            )\n        }else{\n            return null;\n        }\n        \n    })\n    //Volcano markers object\n    const volcanoMarkers = eventData.map((event:any) =>{\n        if(event.categories[0].id === 'volcanoes'){\n            return(\n                // <LocationVolcanoMarker\n                //     key={event.id}  \n                //     lat={event.geometry[0].coordinates[1]} \n                //     lng={event.geometry[0].coordinates[0]} \n                //     onClick={()=>{\n                //         setEventLocationInfo({\n                //             id: event.id,\n                //             details: event.title\n                //         })\n                        \n                //     }}\n                // />\n                <Marker position={[event.geometry[0].coordinates[1],event.geometry[0].coordinates[0]]}>\n                    <Popup>\n                        <h2>id: {event.id},</h2><br/>\n                        <h2>details: {event.title}</h2>\n                    </Popup>\n                </Marker>\n            )\n        }else{\n            return null;\n        }\n    })\n    //Storm markers object\n    const stormMarkers = eventData.map((event:any) =>{\n        if(event.categories[0].id === 'severeStorms'){\n            return(\n                // <LocationStormMarker\n                //     key={event.id}  \n                //     lat={event.geometry[0].coordinates[1]} \n                //     lng={event.geometry[0].coordinates[0]} \n                //     onClick={()=>{\n                //         setEventLocationInfo({\n                //             id: event.id,\n                //             details: event.title\n                //         })\n                        \n                //     }}\n                // />\n                <Marker position={[event.geometry[0].coordinates[1],event.geometry[0].coordinates[0]]}>\n                    <Popup>\n                        <h2>id: {event.id},</h2><br/>\n                        <h2>details: {event.title}</h2>\n                    </Popup>\n                </Marker>\n\n            )\n        }else{\n            return null;\n        }\n    })\n    return (\n        <>\n            <div className=\"map-container\">\n                {/* <div className=\"google-map\">\n                    <GoogleMapReact\n                        bootstrapURLKeys = {{key:googleMapApiKey!}}\n                        defaultCenter={center}\n                        defaultZoom={zoom}\n                    >\n                        {(showFires) ? fireMarkers : <></>}\n                        {(showVolcanos) ? volcanoMarkers : <></>}\n                        {(showStorms) ? stormMarkers : <></>}\n                    </GoogleMapReact>\n                </div> */}\n                <MapContainer center={[center.lat, center.lng]} zoom={zoom}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                        {(showFires) ? fireMarkers : <></>}\n                        {(showVolcanos) ? volcanoMarkers : <></>}\n                        {(showStorms) ? stormMarkers : <></>}\n                </MapContainer>\n                {/* {eventLocationInfo && <LocationInfoBox info={eventLocationInfo}/>} */}\n            </div>\n        </>\n        \n    )\n}\n//Default location the google map react component will load to.\nMap.defaultProps = {\n    center: {\n        //Ajacio, corsica, france geo location.\n        lat: 41.926701,\n        lng: 8.736900\n    },\n    zoom:4\n}\nexport default Map\n","import {Icon} from '@iconify/react';\nimport weatherAppIcon from '@iconify/icons-mdi/sun-wireless-outline';\n\nconst Header = () => {\n    return (\n        <>\n            <header className=\"header-wrapper\">\n                <h1>\n                    <Icon icon={weatherAppIcon}/> Weather App Track Event\n                </h1>\n            </header>\n        </>\n    )\n}\n\nexport default Header\n","import {Icon} from '@iconify/react';\nimport locationFireIcon from '@iconify/icons-ic/outline-local-fire-department';\nimport locationVolcanoIcon from '@iconify/icons-emojione-monotone/snow-capped-mountain';\nimport locationCloudIcon from '@iconify/icons-wi/storm-showers';\n\ntype buttonControlProps = {\n    onClickFireEvents: (event: React.MouseEvent) =>void,\n    onClickVolcanosEvents: (event: React.MouseEvent)=>void,\n    onClickStormsEvents: (event: React.MouseEvent)=>void\n}\n\nconst ButtonControl = ({onClickFireEvents, onClickVolcanosEvents, onClickStormsEvents}: buttonControlProps) => {\n    \n    \n    return (\n        <>\n            <form className=\"button-control-wrapper\">\n                <h2>Choose events </h2>\n                <div className=\"button-control-container\">\n                    <div>\n                        <button onClick={onClickFireEvents}>\n                            <Icon icon={locationFireIcon} className=\"button-marker text-red-600\"/>\n                            <span>Fire events</span>\n                        </button>\n                    </div>\n                    <div>\n                        <button onClick={onClickVolcanosEvents}>\n                            <Icon icon={locationVolcanoIcon} className=\"button-marker text-yellow-400\"/>\n                            <span>Volcano events</span>\n                        </button>\n                    </div>\n                    <div>\n                        <button onClick={onClickStormsEvents}>\n                            <Icon icon={locationCloudIcon} className=\"button-marker text-blue-600\"/>\n                            <span>Storm events</span>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </>\n    )\n}\n\nexport default ButtonControl;\n","export default __webpack_public_path__ + \"static/media/nasa_logo.6ba3dcf7.png\";","import {Icon} from '@iconify/react';\nimport githubIcon from '@iconify/icons-mdi/github';\nimport linkedinIcon from '@iconify/icons-mdi/linkedin';\nimport nasaLogo from '../Utils/Img/nasa_logo.png';\n\ntype footerProps ={\n    currentYear: number;\n}\nconst Footer = ({currentYear}:footerProps) => {\n    const linkedinHrefLink:string = \"https://rw.linkedin.com/in/kevin-tivert\";\n    const githubHrefLink:string = \"https://github.com/KevTiv/wildfire_tracker\";\n    const nasaEonetLink:string = \"https://eonet.gsfc.nasa.gov/\";\n    return (\n        <div className=\"footer-container\">\n            <div className=\" footer-container-wrapper \">\n                <div>\n                    <div className=\"footer-img-container\">\n                        <h1>Powered by the<strong><a href={nasaEonetLink} target=\"_blank\" rel=\"noreferrer\"> NASA API</a></strong>.</h1>\n                        <img className=\"img-footer-responsive\" src={nasaLogo} alt=\"NASA logo\"/>\n                    </div>\n                    <p>Copyright © {currentYear.toString()} Kevin Tivert</p>\n                    <p>All rights reserved</p>\n                    <div className=\"footer-socials-container\">\n                        <div className=\"social-link-container \">\n                            <a href={githubHrefLink} target=\"_blank\" rel=\"noreferrer\">\n                                <Icon icon={githubIcon} className=\"icon-marke\"/>\n                            </a>\n                        </div>\n                        <div className=\"social-link-container \">\n                            <a href={linkedinHrefLink} target=\"_blank\" rel=\"noreferrer\">\n                                <Icon icon={linkedinIcon} className=\"icon-marke\"/>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;","import {useState, useEffect} from 'react';\nimport '../Styles/App/App.css';\nimport Loader from '../Components/Loader';\nimport Map from '../Components/Map';\nimport Header from '../Components/Header';\nimport ButtonControl from '../Components/ButtonControl';\nimport Footer from '../Components/Footer';\n\n\nfunction App() {\n  const [currentYear, setCurrentYear] = useState<number>(0);\n  const [eventData, setEventData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  \n  const [showFires, setShowFires] = useState<boolean>(false);\n  const [showVolcanos, setShowVolcanos] = useState<boolean>(false);\n  const [showStorms, setShowStorms] = useState<boolean>(false);\n\n  useEffect(() => {\n    const currentYear = ()=>{\n      const curDate = new Date();\n      setCurrentYear(curDate.getFullYear());\n    }\n    const fetchEvents = async ()=>{\n      \n      const nasaApiUrlV3:string = process.env.REACT_APP_NASA_EVENT_API_V3!;\n      try {\n        setLoading(true);\n        const res = await fetch(nasaApiUrlV3);\n        const { events } = await res.json();\n\n        setEventData(events);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Could not access NASA API\")\n      }\n    }\n\n    fetchEvents();\n    currentYear();\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"weather-app-visual\">\n        { !loading ? <Map eventData = {eventData} showFires={showFires} showVolcanos={showVolcanos} showStorms={showStorms}/> : <Loader /> }\n        \n        <ButtonControl \n          onClickFireEvents={(e) =>{\n            e.preventDefault();\n            setShowFires(!showFires)}\n          } \n          onClickVolcanosEvents={(e)=>{\n            e.preventDefault();\n            setShowVolcanos(!showVolcanos)\n          }\n          } \n          onClickStormsEvents={(e)=>{\n            e.preventDefault();\n            setShowStorms(!showStorms)}\n          } \n        />\n      </div>\n      <Footer currentYear={currentYear}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}